//
//  MapMap+CoreDataProperties.swift
//  Map Map
//
//  Created by Ben Roberts on 12/5/23.
//
//

import CoreData
import Foundation

extension MapMap {

    /// Implement fetch request of all MapMaps
    /// - Returns: This MapMap
    @nonobjc public class func fetchRequest() -> NSFetchRequest<MapMap> {
        return NSFetchRequest<MapMap>(entityName: "MapMap")
    }
    
    /// Actual height of the image for a MapMap
    @NSManaged public var imageHeight: Double
    /// Actual width of the image for a MapMap
    @NSManaged public var imageWidth: Double
    /// Tracker for if the current for the current MapMap if the user is editing it.
    @NSManaged public var isEditing: Bool
    /// Tracker to ensure the current MapMap has been correctly configured.
    @NSManaged public var isSetup: Bool
    /// Distance from ground the MapMap is configured to stay away from to calculate the scale of the MapMap
    @NSManaged public var mapDistance: Double
    /// Thumbnail of the current MapMap
    @NSManaged public var mapMapEncodedThumbnail: Data?
    /// Latitude of the center of the  current MapMap
    @NSManaged public var mapMapLatitude: Double
    /// Longitude of the center of the  current MapMap
    @NSManaged public var mapMapLongitude: Double
    /// Name of the MapMap
    @NSManaged public var mapMapName: String?
    /// PNG data of the MapMap image after it has had its perspective corrected.
    @NSManaged public var mapMapPerspectiveFixedEncodedImage: Data?
    /// JPEG data of the MapMap image before any processing
    @NSManaged public var mapMapRawEncodedImage: Data?
    /// Stored rotation of the MapMap
    @NSManaged public var mapMapRotation: Double
    /// Scale of the MapMap
    @NSManaged public var mapMapScale: Double
    /// Tracker for if the current MapMap should be displayed on the background map.
    @NSManaged public var shown: Bool
    /// Tracker for how the current MapMap is having its perspective corrected.
    @NSManaged public var cropCorners: FourCorners?
    /// Markers associated with this MapMap
    @NSManaged public var markers: NSSet?
    /// Measurements taken on this MapMap
    @NSManaged public var measurements: NSSet?
}

// MARK: Generated accessors for markers
extension MapMap {

    /// Convenience function generated by Core Data to associate a single Marker with this MapMap
    /// - Parameter value: Marrker to add to this MapMap
    @objc(addMarkersObject:)
    @NSManaged public func addToMarkers(_ value: Marker)

    /// Convenience function generated by Core Data to dissociate a single Marker with this MapMap
    /// - Parameter value: Marrker to add to this MapMap
    @objc(removeMarkersObject:)
    @NSManaged public func removeFromMarkers(_ value: Marker)

    /// Convenience function generated by Core Data to associate multiple Markers with this MapMap
    /// - Parameter value: Marrker to add to this MapMap
    @objc(addMarkers:)
    @NSManaged public func addToMarkers(_ values: NSSet)

    /// Convenience function generated by Core Data to dissociate multiple Markers with this MapMap
    /// - Parameter value: Marrker to add to this MapMap
    @objc(removeMarkers:)
    @NSManaged public func removeFromMarkers(_ values: NSSet)

}

// MARK: Generated accessors for measurements
extension MapMap {

    @objc(addMeasurementsObject:)
    @NSManaged public func addToMeasurements(_ value: MapMeasurement)

    @objc(removeMeasurementsObject:)
    @NSManaged public func removeFromMeasurements(_ value: MapMeasurement)

    @objc(addMeasurements:)
    @NSManaged public func addToMeasurements(_ values: NSSet)

    @objc(removeMeasurements:)
    @NSManaged public func removeFromMeasurements(_ values: NSSet)

}

extension MapMap : Identifiable { }
