//
//  HandleTrackerM.swift
//  Map Map
//
//  Created by Ben Roberts on 2/7/24.
//

import SwiftUI

@Observable
final class HandleTrackerM {
    /// Corners generated by an automatic corner generator.
    public var autoCorners: FourCornersStorage?
    /// Current position of the corners that does not account for rotation,
    public var stockCorners: FourCornersStorage
    /// Current orientation of the corners
    public var orientation: Orientation = .standard
    /// Current position of corners when accounting for rotation.
    public var rotatedStockCorners: FourCornersStorage {
        switch orientation {
        case .standard:
            return stockCorners
        case .down:
            return FourCornersStorage(
                topLeading: stockCorners.bottomTrailing,
                topTrailing: stockCorners.bottomLeading,
                bottomLeading: stockCorners.topTrailing,
                bottomTrailing: stockCorners.topLeading
            )
        case .left:
            return FourCornersStorage(
                topLeading: stockCorners.topTrailing,
                topTrailing: stockCorners.bottomTrailing,
                bottomLeading: stockCorners.topLeading,
                bottomTrailing: stockCorners.bottomLeading
            )
        case .right:
            return FourCornersStorage(
                topLeading: stockCorners.bottomLeading,
                topTrailing: stockCorners.topLeading,
                bottomLeading: stockCorners.bottomTrailing,
                bottomTrailing: stockCorners.topTrailing
            )
        }
    }
    /// Corners generated by an automatic corner generator after they have bee
    public var rotatedAutoCorners: FourCornersStorage? {
        guard let autoCorners = autoCorners
        else { return nil }
        switch orientation {
        case .standard:
            return stockCorners
        case .down:
            return FourCornersStorage(
                topLeading: autoCorners.bottomTrailing,
                topTrailing: autoCorners.bottomLeading,
                bottomLeading: autoCorners.topTrailing,
                bottomTrailing: autoCorners.topLeading
            )
        case .left:
            return FourCornersStorage(
                topLeading: autoCorners.topTrailing,
                topTrailing: autoCorners.bottomTrailing,
                bottomLeading: autoCorners.topLeading,
                bottomTrailing: autoCorners.bottomLeading
            )
        case .right:
            return FourCornersStorage(
                topLeading: autoCorners.bottomLeading,
                topTrailing: autoCorners.topLeading,
                bottomLeading: autoCorners.bottomTrailing,
                bottomTrailing: autoCorners.topTrailing
            )
        }
    }
    
    init(stockCorners: FourCornersStorage) {
        self.stockCorners = stockCorners
    }
}

public enum Orientation: Int16 {
    case standard = 0
    case right = 1
    case down = 2
    case left = 3
}
